#/* $begin code-yso */
#/* $begin code-ysa */
# Execution begins at address 0 
	.pos 0 
init:	irmovl Stack, %esp  	# Set up stack pointer  
	irmovl Stack, %ebp  	# Set up base pointer   
	call Main		# Execute main program
	halt			# Terminate program 

# Array of 4 elements
# Sample linked list
	.align 4
ele1:	.long 0x00a
	.long ele2
ele2:	.long 0x0b0
	.long ele3
ele3:	.long 0xc00
	.long 0


Main:	pushl %ebp 
	rrmovl %esp,%ebp
	irmovl ele1,%eax	
	pushl %eax		# Push ls
	call Sum		# sum_list(list_ptr ls)
	rrmovl %ebp,%esp
	popl %ebp
	ret 

#/* $begin sum-ys 0 */
	#int sum_list(list_ptr ls)
Sum:	pushl %ebp
		rrmovl %esp,%ebp
		mrmovl 8(%ebp),%ecx		#get ls
		xorl %eax,%eax		#val = 0;

Loop:	andl %ecx,%ecx		#ls != NULL
		je Done				#goto Done
		mrmovl (%ecx),%edx	#get ls->val
		addl %edx,%eax		#val += ls->val;
		mrmovl 4(%ecx),%ecx	#ls = ls->next;
		jmp Loop
		
Done:	rrmovl %ebp,%esp
		popl %ebp
		ret
#/* $end sum-ys 0 */
	
	
	


# The stack starts here and grows to lower addresses
	.pos 0x100		
Stack:	 
#/* $end code-ysa */
#/* $end code-yso */
